- name: Ensure user exists with sudo (wheel)
  user:
    name: "{{ muster_user }}"
    groups: wheel
    append: yes
    create_home: yes
    password: "{{ 'SMp00#redo' | password_hash('sha512') }}"

- name: Create work directory
  file:
    path: "/home/{{ muster_user }}/work"
    state: directory
    owner: "{{ muster_user }}"
    group: "{{ muster_user }}"
    mode: '0755'

- name: Ensure unzip is installed (for zip extraction)
  package:
    name: unzip
    state: present

- name: Copy rez-main.zip to work directory
  copy:
    src: rez-main.zip
    dest: "/home/{{ muster_user }}/work/rez-main.zip"
    owner: "{{ muster_user }}"
    group: "{{ muster_user }}"
    mode: '0644'

- name: Extract rez-main.zip into work directory
  unarchive:
    src: "/home/{{ muster_user }}/work/rez-main.zip"
    dest: "/home/{{ muster_user }}/work/"
    remote_src: yes
    owner: "{{ muster_user }}"
    group: "{{ muster_user }}"
    creates: "/home/{{ muster_user }}/work/rez-main"

- name: Check rez install marker
  stat:
    path: "/home/{{ muster_user }}/work/rez-main/.rez_installed"
  register: rez_marker

- name: Run rez installer (python install.py) with sudo
  become: true
  shell: |
    set -euo pipefail
    if command -v python3 >/dev/null 2>&1; then
      python3 install.py
    else
      python install.py
    fi
  args:
    chdir: "/home/{{ muster_user }}/work/rez-main"
  when: not rez_marker.stat.exists
  register: rez_install

- name: Create rez install marker
  file:
    path: "/home/{{ muster_user }}/work/rez-main/.rez_installed"
    state: touch
    owner: "{{ muster_user }}"
    group: "{{ muster_user }}"
    mode: '0644'
  when: rez_install is defined and rez_install.changed

- name: Stat rez command directory
  become: true
  stat:
    path: /opt/rez/bin/rez
  register: rez_dir

- name: Set up rez related environment path
  become: true
  copy:
    dest: /etc/profile.d/rez_path.sh
    owner: root
    group: root
    mode: '0644'
    content: |
      # Managed by Ansible: Rez environment
      # - Keep existing values if already set
      # - Otherwise, set sensible defaults

      # REZ package root (respect existing value)
      export REZ_PACKAGES_ROOT="${REZ_PACKAGES_ROOT:-/opt/vfxplatform}"

      # REZ packages path (respect existing value)
      export REZ_PACKAGES_PATH="${REZ_PACKAGES_PATH:-${REZ_PACKAGES_ROOT}/pkgs/apps:/opt/vfxplatform/pkgs/libs:${REZ_PACKAGES_ROOT}/pkgs/systems:${REZ_PACKAGES_ROOT}/pkgs/projects}"

      # Prepend rez command directory once
      if [ -d /opt/rez/bin/rez ]; then
        case ":$PATH:" in
          *":/opt/rez/bin/rez:"*) ;;
          *) PATH="/opt/rez/bin/rez:$PATH" ;;
        esac
        export PATH
      fi
  when: rez_dir.stat.exists

- name: Install TigerVNC server
  become: true
  package:
    name: tigervnc-server
    state: present

- name: Define VNC settings (display/user/port)
  set_fact:
    vnc_display: 1
    vnc_user: "{{ muster_user }}"
    vnc_port: "{{ 5900 + 1 }}"

- name: Ensure /etc/tigervnc exists
  become: true
  file:
    path: /etc/tigervnc
    state: directory
    mode: '0755'

- name: Map display to user in /etc/tigervnc/vncserver.users
  become: true
  lineinfile:
    path: /etc/tigervnc/vncserver.users
    create: yes
    regexp: '^:{{ vnc_display }}='
    line: ":{{ vnc_display }}={{ vnc_user }}"
    mode: '0644'

- name: Create user .vnc directory
  become: true
  file:
    path: "/home/{{ vnc_user }}/.vnc"
    state: directory
    owner: "{{ vnc_user }}"
    group: "{{ vnc_user }}"
    mode: '0700'

- name: Set VNC password non-interactively
  become: true
  become_user: "{{ vnc_user }}"
  shell: |
    set -euo pipefail
    umask 077
    printf '%s' 'SMp00#redo' | vncpasswd -f > /home/{{ vnc_user }}/.vnc/passwd
  args:
    executable: /bin/bash
  no_log: true

- name: Ensure VNC password file perms
  become: true
  file:
    path: "/home/{{ vnc_user }}/.vnc/passwd"
    owner: "{{ vnc_user }}"
    group: "{{ vnc_user }}"
    mode: '0600'

- name: Create xstartup for user
  become: true
  copy:
    dest: "/home/{{ vnc_user }}/.vnc/xstartup"
    owner: "{{ vnc_user }}"
    group: "{{ vnc_user }}"
    mode: '0755'
    content: |
      #!/bin/bash
      unset SESSION_MANAGER
      unset DBUS_SESSION_BUS_ADDRESS
      exec gnome-session &

- name: Install per-display systemd unit
  become: true
  copy:
    remote_src: true
    src: /usr/lib/systemd/system/vncserver@.service
    dest: "/etc/systemd/system/vncserver@:{{ vnc_display }}.service"
    owner: root
    group: root
    mode: '0644'

- name: Open VNC port in firewalld
  become: true
  ansible.posix.firewalld:
    zone: public
    port: "{{ vnc_port }}/tcp"
    permanent: yes
    state: enabled
    immediate: yes

- name: Reload systemd and enable/start VNC service
  become: true
  block:
    - name: daemon-reload
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Enable VNC service
      ansible.builtin.systemd:
        name: "vncserver@:{{ vnc_display }}.service"
        enabled: yes

    - name: Start VNC service
      ansible.builtin.systemd:
        name: "vncserver@:{{ vnc_display }}.service"
        state: started
