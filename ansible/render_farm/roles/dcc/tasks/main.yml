- name: Install DCCs
  tags: [dcc]
  block:
    - name: Build DCC list and expect need flag
      set_fact:
        dcc_list: "{{ dccs | dict2items }}"
        dcc_need_expect: "{{ (dccs | dict2items | selectattr('value.expect','defined') | selectattr('value.expect') | list | length) > 0 }}"

    - name: Ensure pexpect for expect module (only if any needs expect)
      become: true
      package:
        name: python3-pexpect
        state: present
      when: dcc_need_expect

    - name: Ensure install markers directory
      become: true
      file:
        path: /var/lib/render-installs
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Check install marker for each DCC
      stat:
        path: "/var/lib/render-installs/{{ item.value.marker }}"
      loop: "{{ dcc_list }}"
      register: dcc_markers

    - name: Install DCCs (handle expect/shell without zip)
      become: true
      block:
        - name: Install with expect (auto EULA)
          ansible.builtin.expect:
            command: /bin/bash -lc 'bash "{{ item.item.value.script }}"'
            timeout: 1800
            responses: "{{ item.item.value.responses | default({}) }}"
          when:
            - item.item.value.expect | default(false)
            - not item.stat.exists
          loop: "{{ dcc_markers.results }}"
          loop_control:
            label: "{{ item.item.value.name }}"

        - name: Install with shell
          ansible.builtin.shell: >
            /bin/bash -lc 'bash "{{ item.item.value.script }}"'
          when:
            - not (item.item.value.expect | default(false))
            - not item.stat.exists
          loop: "{{ dcc_markers.results }}"
          loop_control:
            label: "{{ item.item.value.name }}"

    - name: Create install markers
      become: true
      file:
        path: "/var/lib/render-installs/{{ item.item.value.marker }}"
        state: touch
      when: not item.stat.exists
      loop: "{{ dcc_markers.results }}"
      loop_control:
        label: "{{ item.item.value.name }}"

- name: Generate pymel cache files for Maya
  tags: [pymel]
  block:
    - name: Check pymel cache directory for Maya {{ maya_version }}
      ansible.builtin.stat:
        path: "{{ pymel_cache_dir }}"
      register: pymel_cache_dir_stat

    - name: Warn and skip if pymel cache directory is missing
      ansible.builtin.debug:
        msg: "Directory not found: {{ pymel_cache_dir }}. Skipping pymel cache generation."
        warn: true
      when: not (pymel_cache_dir_stat.stat.isdir | default(false))

    - name: Copy cache files {{ pymel_cache_src_version }} -> {{ pymel_cache_dst_version }} (no overwrite, preserve attrs)
      become: true
      ansible.builtin.command: >
        cp -n -p "{{ pymel_cache_dir }}/{{ item }}{{ pymel_cache_src_version }}.py"
                "{{ pymel_cache_dir }}/{{ item }}{{ pymel_cache_dst_version }}.py"
      args:
        creates: "{{ pymel_cache_dir }}/{{ item }}{{ pymel_cache_dst_version }}.py"
      loop: "{{ pymel_cache_basenames }}"
      loop_control:
        label: "{{ item }}{{ pymel_cache_dst_version }}.py"
      when: pymel_cache_dir_stat.stat.isdir | default(false)
